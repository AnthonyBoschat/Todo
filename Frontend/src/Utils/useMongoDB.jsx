import useBackend from "./useBackend";

// Toute modificaiton du localStorage passe par ce hook
export default function useMongoDB(){

    const {fetchRequest} = useBackend()


    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // FONCTION
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Enregistre un utilisateur
    const mongoDB_saveNewUser = (newUser) => {
        fetchRequest("POST", {
            route:"/users/create",
            body:newUser,
        })
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Connecte un utilisateur
    const mongoDB_connectUser = (user) => {
        fetchRequest("POST", {
            route:`/users/connect`,
            body:user,
        })
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // DÃ©connecte un utilisateur
    const mongoDB_disconnectUser = () => {
        fetchRequest("GET", {
            route:"/users/disconnect"
        })
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Reconnecte un utilisateur
    const mongoDB_reconnectUser = () => {
        return new Promise((resolve,reject) => {
            fetchRequest("GET", {
                route:"/users/reconnect",
                finaly: () => resolve()
            })
        })
    }

    const mongoDB_getAllData = () => {
        return new Promise(resolve => {
            fetchRequest("GET", {
                route:"/users/getAllData",
                finaly: () => resolve()
            })
        })
    }
    

    return{
        mongoDB_saveNewUser,
        mongoDB_connectUser,
        mongoDB_disconnectUser,
        mongoDB_reconnectUser,
        mongoDB_getAllData,
    }
}